name: cd

on:
  workflow_dispatch:
    inputs:
      deploy_infra:
        description: 'Whether to deploy infrastructure'
        default: true
        required: true
        type: boolean
      deploy_app:
        description: 'Whether to deploy app'
        default: true
        required: true
        type: boolean
  workflow_call:
    inputs:
      deploy_infra:
        required: true
        type: boolean
      deploy_app:
        required: true
        type: boolean
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      INFURA_PROJECT_ID:
        required: true
      POKT_PROJECT_ID:
        required: true
      REGISTRY_API_AUTH_TOKEN:
        required: true

concurrency: cd

env:
  IMAGE_NAME: 'rpc-proxy'
  TF_VAR_infura_project_id: ${{ secrets.INFURA_PROJECT_ID }}
  TF_VAR_pokt_project_id: ${{ secrets.POKT_PROJECT_ID }}
  TF_VAR_registry_api_auth_token: ${{ secrets.REGISTRY_API_AUTH_TOKEN }}

jobs:
  deploy-infra-staging:
    if: ${{ inputs.deploy_infra }}
    runs-on: ubuntu-latest
    environment:
      name: infra/staging
      url: https://staging.rpc.walletconnect.com/health
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - id: deploy-staging
        uses: WalletConnect/actions/actions/deploy-terraform/@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          environment: staging
          app-name: ${{ github.event.repository.name }}

  deploy-app-staging:
    if: ${{ inputs.deploy_app }}
    runs-on: ubuntu-latest
    environment:
      name: app/staging
      url: https://staging.rpc.walletconnect.com/hello
    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr
      - id: deploy
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ENVIRONMENT: staging
        uses: WalletConnect/actions/actions/deploy-ecs/@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          cluster-name: ${{ env.ENVIRONMENT }}_${{ env.IMAGE_NAME }}_cluster
          service-name: ${{ env.ENVIRONMENT }}_${{ env.IMAGE_NAME }}-service
          task-definition-name: ${{ env.ENVIRONMENT }}_${{ env.IMAGE_NAME }}
          image-name: ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  validate:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    needs: [deploy-app-staging, deploy-infra-staging]
    runs-on: ubuntu-latest
    environment:
      name: app/staging
      url: https://staging.rpc.walletconnect.com/hello

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        rust:
          - 1.65
        cargo:
          - name: "Clippy"
            cmd: clippy
            args: -- -D warnings
            cache: {}
          - name: "Formatting"
            cmd: fmt
            args: -- --check
            cache: {}
          - name: "Integration Tests: Pokt - localhost"
            cmd: test
            args: --all-features -- functional::connection::pokt
            cache: { sharedKey: "tests" }
          - name: "Integration Tests: Infura - localhost" 
            cmd: test
            args: --all-features -- functional::connection::infura
            cache: { sharedKey: "tests" }
          - name: "Integration Tests: Binance - localhost"
            cmd: test
            args: --all-features -- functional::connection::binance
            cache: { sharedKey: "tests" }
    steps: 
      # Checkout code
      - name: "Git checkout"
        uses: actions/checkout@v3

      # Install Rust toolchain
      - name: "Install Rust ${{ matrix.rust }}"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: default
          override: true

      - name: "Task ${{ matrix.cargo.name }}"
        env:
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          RPC_PROXY_INFURA_PROJECT_ID: ${{ secrets.INFURA_PROJECT_ID }} 
          RPC_PROXY_REGISTRY_API_URL: ${{ secrets.REGISTRY_URL }}
          RPC_PROXY_REGISTRY_API_AUTH_TOKEN: ${{ secrets.RPC_PROXY_REGISTRY_API_AUTH_TOKEN }}
          RPC_PROXY_POKT_PROJECT_ID: ${{ secrets.POKT_PROJECT_ID }} 
        uses: actions-rs/cargo@v1
        with:
          command: ${{ matrix.cargo.cmd }}
          args: ${{ matrix.cargo.args }}

  deployment_windows:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    needs: [validate]
    outputs:
      result: ${{ steps.decide.outputs.deploy_or_not }}
    runs-on: ubuntu-latest
    environment:
      name: app/prod
      url: https://rpc.walletconnect.com/health
    steps:
      - id: decide
        uses: cobot/deploy-window-action@v1
        with:
          earliest-hour: "9"
          latest-hour: "17"
          latest-weekday: "5"
          time-zone: UTC
          force-deploy-phrase: force deploy

  deploy-infra-prod:
    # Only deploy if tests passed and deployment windows are open
    # Ignore deployment windows if workflow was started manually
    if: ${{ always() && inputs.deploy_infra && needs.validate.result == 'success' && (needs.deployment_windows.outputs.result == 'yes' || github.event_name == 'workflow_dispatch') }}
    needs: [validate, deployment_windows]
    runs-on: ubuntu-latest
    environment:
      name: infra/prod
      url: https://rpc.walletconnect.com/health
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - id: deploy-prod
        uses: WalletConnect/actions/actions/deploy-terraform/@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          environment: prod
          app-name: ${{ github.event.repository.name }}

  deploy-app-prod:
    # Only deploy if tests passed and deployment windows are open
    # Ignore deployment windows if workflow was started manually
    if: ${{ always() && inputs.deploy_app && needs.validate.result == 'success' && (needs.deployment_windows.outputs.result == 'yes' || github.event_name == 'workflow_dispatch') }}
    needs: [validate, deployment_windows]
    runs-on: ubuntu-latest
    environment:
      name: app/prod
      url: https://rpc.walletconnect.com/health
    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr
      - id: deploy
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ENVIRONMENT: prod
        uses: WalletConnect/actions/actions/deploy-ecs/@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          cluster-name: ${{ env.ENVIRONMENT }}_${{ env.IMAGE_NAME }}_cluster
          service-name: ${{ env.ENVIRONMENT }}_${{ env.IMAGE_NAME }}-service
          task-definition-name: ${{ env.ENVIRONMENT }}_${{ env.IMAGE_NAME }}
          image-name: ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
